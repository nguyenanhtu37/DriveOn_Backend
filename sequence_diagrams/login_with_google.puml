@startuml LoginWithGoogleSequence
title Sequence diagram for Login with Google

actor User as "User"
boundary LoginUI as "LoginUI"
control AuthController as "AuthController"
participant AuthService as "AuthService"
participant Google as "Google"

' Step 1: User clicks the login button
User -> LoginUI: (1) Click "Login with Google"
activate LoginUI

' Step 2: Login UI asks Google for an access token
LoginUI -> Google: (2) Request access token
activate Google

' Step 3: Google sends the token back to Login UI
Google --> LoginUI: (3) Send access token
deactivate Google

' Step 4: Login UI sends the token to Auth Controller
LoginUI -> AuthController: (4) Send access token
activate AuthController

' Step 5: Auth Controller forwards token to Auth Service
AuthController -> AuthService: (5) Send access token
activate AuthService

' Step 6: Auth Service verifies the token with Google
AuthService -> Google: (6) Verify token
activate Google

' Step 7: Google confirms the token and sends user info
Google --> AuthService: (7) Send user info (email, name, googleId, ...)
deactivate Google

alt Token verification fails
    ' Step 8a: Auth Service reports error if token is invalid
    AuthService --> AuthController: (8) Send "Google login failed" message
    deactivate AuthService
    ' Step 9a: Auth Controller forwards error to Login UI
    AuthController --> LoginUI: (9) Send "Google login failed" message
    deactivate AuthController
    ' Step 10a: Login UI shows error to user
    LoginUI --> User: (10) Show "Login failed" message
    deactivate LoginUI
else Token is valid
    ' Step 8: Auth Service checks for existing user
    AuthService -> AuthService: (8) Look for user by email and googleId

    alt User not found
        ' Step 9a: Auth Service creates a new user
        AuthService -> AuthService: (9) Create new user with default roles
        
        alt Default roles not found
            ' Step 10a: Auth Service reports error if roles are missing
            AuthService --> AuthController: (10) Send "Default role not found" message
            deactivate AuthService
            ' Step 11a: Auth Controller forwards error to Login UI
            AuthController --> LoginUI: (11) Send "Default role not found" message
            deactivate AuthController
            ' Step 12a: Login UI shows error to user
            LoginUI --> User: (12) Show "Login failed" message
            deactivate LoginUI
        else Default roles found
            ' Step 10: Auth Service saves the new user
            AuthService -> AuthService: (10) Save new user (email, name, googleId, etc.)
        end
    else User found
        ' Step 9: Auth Service uses existing user
        AuthService -> AuthService: (9) Load existing user details
    end

    ' Step 11: Auth Service creates a JWT token
    AuthService -> AuthService: (11) Create JWT token (user id, email, roles)

    ' Step 12: Auth Service sends the token back to Auth Controller
    AuthService --> AuthController: (12) Send success with JWT token
    deactivate AuthService

    ' Step 13: Auth Controller forwards token to Login UI
    AuthController --> LoginUI: (13) Send success with JWT token
    deactivate AuthController

    ' Step 14: Login UI redirects user to homepage
    LoginUI --> User: (14) Redirect to homepage (logged in)
    deactivate LoginUI
end

@enduml