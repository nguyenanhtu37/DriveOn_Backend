@startuml

title Sequence diagram for Signup

actor User
boundary SignupForm
control AuthController
participant AuthService
participant Database as "UserDB"
participant Redis
participant EmailService as "Mail Server"

== Signup Process ==
User -> SignupForm: (1) Enter signup details
activate SignupForm
SignupForm -> AuthController: (2) Send signup request
activate AuthController
AuthController -> AuthService: (3) Process signup request
activate AuthService

AuthService -> AuthService: (4) Validate user data
AuthService -> Database: (5) Check if email exists
activate Database
Database --> AuthService: (6) Return result

deactivate Database

alt Email already exists
    AuthService --> AuthController: (7) Return error "Email already exists"
    deactivate AuthService
    AuthController --> SignupForm: (8) Show error message
    deactivate AuthController
    SignupForm --> User: (9) Display error message
    deactivate SignupForm
else New email
    AuthService -> AuthService: (7) Hash password
    AuthService -> AuthService: (8) Generate verification token
    AuthService -> Redis: (9) Store token with email as key
    activate Redis
    Redis --> AuthService: (10) OK
    deactivate Redis
    AuthService -> EmailService: (11) Dispatch verification email (contains token)
    activate EmailService
    EmailService --> AuthService: (12) OK
    deactivate EmailService
    AuthService --> AuthController: (13) Return success "Verification email sent"
    deactivate AuthService
    AuthController --> SignupForm: (14) Notify user email sent
    deactivate AuthController
    SignupForm --> User: (15) Display confirmation message
    deactivate SignupForm
end

== Email Verification ==
User -> EmailService: (1) Click verification link
EmailService -> AuthController: (2) Send verification request
activate AuthController
AuthController -> AuthService: (3) Process verification request
activate AuthService

AuthService -> Redis: (4) Validate token
activate Redis
Redis --> AuthService: (5) Return stored token

deactivate Redis

alt Invalid or expired token
    AuthService --> AuthController: (6) Return error "Invalid or expired token"
    deactivate AuthService
    AuthController --> EmailService: (7) Show error message
    deactivate AuthController
    EmailService --> User: (8) Display error message
else Valid token
    AuthService -> Database: (6) Fetch default roles
    activate Database
    Database --> AuthService: (7) Return roles
    deactivate Database
    AuthService -> Database: (8) Save user data in DB
    activate Database
    Database --> AuthService: (9) Confirm user saved
    deactivate Database
    AuthService --> AuthController: (10) Return success "Email verified successfully"
    deactivate AuthService
    AuthController --> EmailService: (11) Notify user of success
    deactivate AuthController
    EmailService --> User: (12) Display success message
end

@enduml
