@startuml

title Sequence diagram for Reset password

actor User
boundary ResetPasswordForm
control AuthController
participant AuthService
participant Redis
participant EmailService as "Mail Server"
participant Database as "UserDB"

== Request password reset ==
User -> ResetPasswordForm: (1) Enter email to reset password
activate ResetPasswordForm
ResetPasswordForm -> ResetPasswordForm: (2) Validate email format

alt Invalid email format
    ResetPasswordForm --> User: (3) Show error message "Invalid email format"
    deactivate ResetPasswordForm
else Valid email format
    ResetPasswordForm -> AuthController: (3) Send password reset request
    activate AuthController
    AuthController -> AuthService: (4) Dispatch email
    activate AuthService
    AuthService -> AuthService: (5) Validate email
    AuthService -> Database: (6) Find user by email
    activate Database
    Database --> AuthService: (7) Return user (if exists)
    deactivate Database

    alt User does not exist
        AuthService --> AuthController: (8) Return error "User does not exist"
        deactivate AuthService
        AuthController --> ResetPasswordForm: (9) Show error message
        deactivate AuthController
        ResetPasswordForm --> User: (10) Display error message
        deactivate ResetPasswordForm
    else User exists
        AuthService -> AuthService: (8) Generate reset token
        AuthService -> Redis: (9) Store token with email as key
        activate Redis
        Redis --> AuthService: (10) OK
        deactivate Redis
        AuthService -> EmailService: (11) Dispatch reset password email (contains token)
        activate EmailService
        EmailService --> AuthService: (12) OK
        deactivate EmailService
        AuthService --> AuthController: (13) Return success "Password reset email sent"
        deactivate AuthService
        AuthController --> ResetPasswordForm: (14) Notify user email sent
        deactivate AuthController
        ResetPasswordForm --> User: (15) Display confirmation message
        deactivate ResetPasswordForm
    end
end

== Reset password ==
User -> ResetPasswordForm: (1) Click link in email, enter new password
activate ResetPasswordForm
ResetPasswordForm -> ResetPasswordForm: (2) Validate password format

alt Invalid password format
    ResetPasswordForm --> User: (3) Show error message "Invalid password format"
    deactivate ResetPasswordForm
else Valid password format
    ResetPasswordForm -> AuthController: (3) Send password reset request (token, newPassword)
    activate AuthController
    AuthController -> AuthService: (4) Dispatch request
    activate AuthService
    AuthService -> Redis: (5) Verify token
    activate Redis
    Redis --> AuthService: (6) Return stored token
    deactivate Redis

    alt Valid token
        AuthService -> AuthService: (7) Encrypt new password
        AuthService -> Database: (8) Update new password
        activate Database
        Database --> AuthService: (9) OK
        deactivate Database
        AuthService -> Redis: (10) Delete token after successful reset
        activate Redis
        Redis --> AuthService: (11) OK
        deactivate Redis
        AuthService --> AuthController: (12) Return success "Password reset successfully"
        deactivate AuthService
        AuthController --> ResetPasswordForm: (13) Notify user of success
        deactivate AuthController
        ResetPasswordForm --> User: (14) Display success message
        deactivate ResetPasswordForm
    else Invalid or expired token
        AuthService --> AuthController: (7) Return error "Invalid or expired token"
        deactivate AuthService
        AuthController --> ResetPasswordForm: (8) Show error message
        deactivate AuthController
        ResetPasswordForm --> User: (9) Display error message
        deactivate ResetPasswordForm
    end
end

@enduml